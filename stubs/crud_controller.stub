<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\API\BaseController;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Models\User;

class {{ class }} extends BaseController
{
    public $model;

    public function __construct()
    {
        $this->model = new User();
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $records =  $this->model->all();
            return $this->sendResponse($records, 'List retrieved successfully.');
        } catch (\Exception $e) {
            $this->errorLog($e);
            return $this->sendError('Something went wrong.', []);
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $input = $request->all();
        $validator = Validator::make($input, [
            'name' => 'required',
            'detail' => 'required'
        ]);
        if ($validator->fails()) {
            return $this->sendError('Validation Error.', $validator->errors(),422);
        }
        try {
            // $validated = $request->validated();
            $record =  $this->model->create($input);
            return $this->sendResponse($record, 'Record created successfully.');
        } catch (\Exception $e) {
            $this->errorLog($e);
            return $this->sendError('Something went wrong.', (object) []);
        }
    }


    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        try {
            $record = $this->model->find($id);
            if (!$record) {
                return $this->sendError('Record not found.');
            }
            return $this->sendResponse($record, 'Record retrieved successfully.');
        } catch (\Exception $e) {
            $this->errorLog($e);
            return $this->sendError('Something went wrong.', (object) []);
        }
    }


    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $input = $request->all();
        $validator = Validator::make($input, [
            'name' => 'required',
            'detail' => 'required'
        ]);
        if ($validator->fails()) {
            return $this->sendError('Validation Error.', $validator->errors(),422);
        }
        try {
            $record = $this->model->findOrFail($id);
            if ($record) {
                $record->update($input);
            }
            $newRecord = $this->model->find($id);
            return $this->sendResponse($newRecord, 'Record updated successfully.');
        } catch (\Exception $e) {
            $this->errorLog($e);
            return $this->sendError('Something went wrong.', (object) []);
        }
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        try {
            $record = $this->model->find($id);
            if ($record) {
                $record->delete();
            }
            return $this->sendResponse($record, 'Record deleted successfully.');
        } catch (\Exception $e) {
            $this->errorLog($e);
            return $this->sendError('Something went wrong.', (object) []);
        }
    }
}
